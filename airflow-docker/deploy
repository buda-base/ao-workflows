#!/usr/bin/env bash
#
#
# Create a deployment directory for the airflow docker compose service

#

set -e
export ME=$(basename $0)
. ~/bin/init_sys.sh

# ----------------    CONST ---------------------------

_DEV_PROD_LEVEL="DEV"
_PROD_PROD_LEVEL="PROD"

# Allows RW access to RS Archives
# prod:
# Prod userid should be `service` uid on bodhi & sattva
_PROD_SYNC_ACCESS_UID=1001
# Standard user under docker
_DEV_SYNC_ACCESS_UID=5000

# See bdrc-docker-compose.yml - leaving this unset is handled with the:
# - ${ARCH_ROOT:-/mnt}:/mnt
# stanza in volumes: This has the same meaning as in bash variable substitution

_PROD_ARCH_ROOT=
_DEV_ARCH_ROOT=.
# ----------------   /CONST ---------------------------


function usage() {
  echo "Usage: ${ME} [-h|--help] -s|--source <source-dir> -d|--dest <deploy-dir> [-i|--init-env <deploy-dir>] <--dev|--prod>"
  echo "Create and deployment directory for the airflow docker compose service"
  echo "  -h|--help"
  echo "  -s|--source <source-dir>: source directory"
  echo "  -d|--dest <deploy-dir>: deployment directory"
  echo "  -i|--init-env <deploy-dir>: initialize test environment AFTER creating it with --s and --d"
  echo "  --dev| prod: development or production deployment. **REQUIRED** with -s and -d, not with -i"
  echo ""
  echo "the -i|--init-env is used standalone to build a local copy RS archive for testing."
  echo "  It is not used with -s and -d, and does not require --dev|--prod arguments"
}
init_test_env() {
  # See ./bdrc-docker-compose.yml scheduler -> volumes:  for mount points
  # Make the staging directories.
  # Make archive roots
  for d in $(seq 0 99); do
    todo=${1}/Archive$(($d / 25))/$(printf "%02d" $d)
    mkdir -p $todo || exit 1
    chmod -R 777 $todo
  done

  # Make the staging directories.
  # See /etc/fstab on sattva
  mkdir -p ${1}/sync-transfer
}

OPTIONS=$(getopt -o hs:d:i: --long help,source,dest,init-env,dev,prod -- "$@")

while true; do # Parse command line options
  case "$1" in
  -s | --source)
    _SRC=${2?"No source directory given."}
    shift 2
    ;;
  -d | --dest)
    _DEPLOY=${2?"No deployment directory given."}
    shift 2
    ;;
  -i | --init-env)
    init_home=${2?"--init-env: No deploy directory given."}
    init_test_env $2
    exit $?
    ;;
  -h | --help)
    usage
    exit 1
    ;;
  --dev)
    _ARG_PROD_LEVEL=$_DEV_PROD_LEVEL
    shift
    ;;
  --prod)
    _ARG_PROD_LEVEL=$_PROD_PROD_LEVEL
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    break
    ;;
  esac
done

export SRC=${_SRC?"-s | --source required."}
export DEPLOY=${_DEPLOY?"-d | --dest required."}

export DEPLOY_PROD_LEVEL=${_ARG_PROD_LEVEL:?"--dev or --prod required"}


if [[ $DEPLOY_PROD_LEVEL == $_PROD_PROD_LEVEL ]]; then
  log_echo "Production deployment"
  MY_SYNC_ACCESS_UID=${_PROD_SYNC_ACCESS_UID}
  MY_ARCH_ROOT=${_PROD_ARCH_ROOT}
elif [[ $DEPLOY_PROD_LEVEL == $_DEV_PROD_LEVEL ]]; then
  log_echo "Development deployment"
  MY_SYNC_ACCESS_UID=${_DEV_SYNC_ACCESS_UID}
  MY_ARCH_ROOT=${_DEV_ARCH_ROOT}
else
  log_echo "Unknown deployment level: $DEPLOY_PROD_LEVEL"
  exit 1
fi


[[ ! -d $DEPLOY ]] && {   mkdir $DEPLOY || exit 1 ;  }
# jimk aow-14 - add sync logs
log_echo "building directories"
for DD in "$DEPLOY/dags" "$DEPLOY/logs"  "$DEPLOY/plugins" "$DEPLOY/processing" "$DEPLOY/processing/logs" "$DEPLOY/data" ; do
    mkdir -p $DD
    chmod 777 $DD
done


log_echo docker-compose
cp -pv $SRC/bdrc-docker-compose.yml $DEPLOY/docker-compose.yaml
log_echo dags
cp -rpv $SRC/dags ${DEPLOY}

# Moved from bdrc-docker.sh
export SECRETS=$DEPLOY/.docker-secrets
log_echo secrets - bdrc
mkdir -p "${SECRETS}"
cp -vp ~/.config/bdrc/docker/* "${SECRETS}" || exit 1

mkdir -p ${DEPLOY}/.config/bdrc/auditTool
cp -vp .config/bdrc/auditTool/user.properties ${DEPLOY}/.config/bdrc/auditTool || exit 1
cp -vp .config/bdrc/site-sync.yml ${DEPLOY}/.config/bdrc || exit 1
#
# These section names, 'default' and 'ap_northeast', are hard-coded in the dags/..py
log_echo aws default
./extract-section.pl ~/.aws/credentials default > ${SECRETS}/aws-credentials || exit 1
# jimk archive-ops-14 - support other regions
log_echo aws-others
./extract-section.pl ~/.aws/credentials ap_northeast >> ${SECRETS}/aws-credentials || exit 1
# chmod u-w "${SECRETS}"

log_echo .env
cat <<EOF >$DEPLOY/.env
SECRETS=.docker-secrets
# hush run-time warnings of build environments
COMPOSE_PY_REQS=
BIN=
COMPOSE_BUILD_DIR=
# Comment ARCH_ROOT in production, to use the default /mnt in bdrc-docker-compose
ARCH_ROOT=${MY_ARCH_ROOT}
#
SYNC_ACCESS_UID=$MY_SYNC_ACCESS_UID
EOF

log_echo "Deployment directory created: $DEPLOY"
log_echo "manage  the services with: cd $DEPLOY && docker compose [up -d | down | log | exec....."
