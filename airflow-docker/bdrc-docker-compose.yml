# For use with deploy

version: '3.7'

# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
# jimk ao14 local change
  - TZ=America/New_York
# jimk aow32 - comment for prod
  - PYDEV_DEBUG=YES


# See ./Dockerfile-bdrc
x-airflow-image: &airflow_image bdrc-airflow

# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  any-name:
    build:
      context: ${COMPOSE_BUILD_DIR}
      dockerfile: ${COMPOSE_BDRC_AIRFLOW_DOCKERFILE:-Dockerfile-bdrc}
      args:
        SYNC_SCRIPTS_HOME: ${BIN}
        PY_REQS: ${COMPOSE_PY_REQS}
    image: *airflow_image

  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"

  init:
    image: *airflow_image
    depends_on:
      - postgres
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'

  webserver:
    image: *airflow_image
    restart: always
    depends_on:
      - postgres
    ports:
      - "8089:8080"
    volumes:
      - ./logs:/opt/airflow/logs
    environment: *airflow_environment
    command: webserver

  scheduler:
    image: *airflow_image

    user: ${SYNC_ACCESS_UID}
    restart: always
    depends_on:
      - postgres
    volumes:
      # System logs
      - ./logs:/opt/airflow/logs
      # In DEV, ARCH_ROOT is set, so that it has to have an AO-staging-Incoming & etc
      # - ${ARCH_ROOT:-/mnt}/AO-staging-Incoming/bag-download:/home/airflow/bdrc/data
      # aow32 - local work
      - ./data:/home/airflow/bdrc/data
      # ao-workflows-18 - dip_log match fs
      - ${ARCH_ROOT:-/mnt}:/mnt

      # This allows us to dynamically add or modify dags without restarting the scheduler
      - ./dags:/opt/airflow/dags
      # for sync logs. Don't collide with airflow logs.
      # See:
      #      dags/glacier_staging_to_sync init_env
      #      ./deploy
      - ${ARCH_ROOT:-/mnt}/processing/logs:/home/airflow/bdrc/log
      # See FileWatcherDebagSync
      # airflow user links
      - ./bin:/home/airflow/bin
      - ./.config:/home/airflow/.config
    environment: *airflow_environment
    command: scheduler

    secrets:
      - db_apps
      - drs_cnf
      - aws

secrets:
  db_apps:
    file:
      ${SECRETS}/db_apps.config
  drs_cnf:
    file:
      ${SECRETS}/drsnew.config
  aws:
    file:
      ${SECRETS}/aws-credentials
